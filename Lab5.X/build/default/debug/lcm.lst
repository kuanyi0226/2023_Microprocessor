

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                                           Thu Oct 19 08:40:13 2023


     1                           	processor	18F4520
     2                           	pagewidth 132
     3                           	opt	flic
     4                           	psect	udata_acs,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     5                           	psect	udata_bank0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     6                           	psect	udata_bank1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     7                           	psect	udata_bank2,global,class=BANK2,space=1,delta=1,lowdata,noexec
     8                           	psect	udata_bank3,global,class=BANK3,space=1,delta=1,lowdata,noexec
     9                           	psect	udata_bank4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    10                           	psect	udata_bank5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    11                           	psect	udata,global,class=RAM,space=1,delta=1,noexec
    12                           	psect	code,global,reloc=2,class=CODE,delta=1
    13                           	psect	data,global,reloc=2,class=CONST,delta=1,noexec
    14                           	psect	edata,global,class=EEDATA,space=3,delta=1,noexec
    15                           	psect	mytext,local,reloc=1,class=CODE,delta=1
    16   000000                     
    17                           	psect	edata
    18   000000                     stk_offset	set	0
    19   000000                     auto_size	set	0
    20                           
    21                           ; stack_auto defines a symbol /name/_offset which equates to the
    22                           ; stack offset of the auto object in question
    23   000000                     
    24                           ; stack_param defines a symbol /name/_offset which equates to the
    25                           ; stack offset of the parameter object in question
    26   000000                     
    27                           ; alloc_stack adjusts the SP to allocate space for auto objects
    28                           ; it also links in to the btemp symbol so that can be used
    29   000000                     
    30                           ; restore_stack adjusts the SP to remove all auto and parameter
    31                           ; objects from the stack prior to returning from a function
    32   000000                     
    33                           	psect	mytext
    34                           
    35                           ; notice: int: 16 bit, char: 8 bit
    36                           ; input: two 8-bit unsigned int
    37   000602                     _lcm:
    38                           	callstack 0
    39   000602  C001 F011          	movff	1,17
    40   000606  C003 F013          	movff	3,19
    41   00060A  0E01               	movlw	1
    42   00060C  6E21               	movwf	33,c
    43   00060E  0E01               	movlw	1
    44   000610  6E23               	movwf	35,c
    45   000612                     loop:
    46                           
    47                           ; judge whether a is same as b
    48                           ;low
    49   000612  C011 FFE8          	movff	17,wreg
    50   000616  6213               	cpfseq	19,c	; skip if a_low == b_low(go to check higher bits)
    51   000618  D005               	goto	times_a_or_b
    52                           
    53                           ;high
    54   00061A  C010 FFE8          	movff	16,wreg
    55   00061E  6212               	cpfseq	18,c	; skip if a_high == b_high(found ans!!)
    56   000620  D001               	goto	times_a_or_b
    57   000622  D023               	goto	finish
    58   000624                     times_a_or_b:
    59                           
    60                           ;find a or b who is little
    61                           ;judge higher 8 bits is same or not
    62   000624  C010 FFE8          	movff	16,wreg	;
    63   000628  6212               	cpfseq	18,c	; skip if a_h == b_h
    64   00062A  D006               	goto	compare_high
    65   00062C  C013 FFE8          	movff	19,wreg
    66   000630  6A30               	clrf	48,c	; little flag = 0
    67   000632  6411               	cpfsgt	17,c	; skip if a_l > b_l(greater flag set 0)
    68   000634  2A30               	incf	48,f,c	; little flag set 1
    69   000636  D005               	goto	end_compare
    70   000638                     compare_high:
    71   000638  C012 FFE8          	movff	18,wreg
    72   00063C  6A30               	clrf	48,c	; little flag = 0
    73   00063E  6410               	cpfsgt	16,c	; skip if a_h > b_h(greater flag set 0)
    74   000640  2A30               	incf	48,f,c	; little flag set 1
    75   000642                     end_compare:
    76                           
    77                           ;increase the times of little one
    78   000642  A030               	btfss	48,0,c	; skip if flag == 1(a is litter)
    79   000644  D009               	goto	change_b
    80   000646  2A21               	incf	33,f,c	; ++
    81   000648  C001 FFE8          	movff	1,wreg	; WREG = original_a
    82   00064C  0221               	mulwf	33,c	; PROD = original_a * a_times
    83                           
    84                           ;update a's value
    85   00064E  CFF4 F010          	movff	prodh,16
    86   000652  CFF3 F011          	movff	prodl,17
    87   000656  D7DD               	goto	loop	; judge again
    88   000658                     change_b:
    89   000658  2A23               	incf	35,f,c	; ++
    90   00065A  C003 FFE8          	movff	3,wreg	; WREG = original_b
    91   00065E  0223               	mulwf	35,c	; PROD = original_b * b_times
    92                           
    93                           ;update a's value
    94   000660  CFF4 F012          	movff	prodh,18
    95   000664  CFF3 F013          	movff	prodl,19
    96   000668  D7D4               	goto	loop	; judge again
    97   00066A                     finish:
    98                           
    99                           ;write back result to .c
   100   00066A  C011 F001          	movff	17,1	; low bits
   101   00066E  C010 F002          	movff	16,2	; high bits
   102   000672  0012               	return	
   103                           tosu	equ	0xFFF
   104                           tosh	equ	0xFFE
   105                           tosl	equ	0xFFD
   106                           stkptr	equ	0xFFC
   107                           pclatu	equ	0xFFB
   108                           pclath	equ	0xFFA
   109                           pcl	equ	0xFF9
   110                           tblptru	equ	0xFF8
   111                           tblptrh	equ	0xFF7
   112                           tblptrl	equ	0xFF6
   113                           tablat	equ	0xFF5
   114                           prodh	equ	0xFF4
   115                           prodl	equ	0xFF3
   116                           indf0	equ	0xFEF
   117                           postinc0	equ	0xFEE
   118                           postdec0	equ	0xFED
   119                           preinc0	equ	0xFEC
   120                           plusw0	equ	0xFEB
   121                           fsr0h	equ	0xFEA
   122                           fsr0l	equ	0xFE9
   123                           wreg	equ	0xFE8
   124                           indf1	equ	0xFE7
   125                           postinc1	equ	0xFE6
   126                           postdec1	equ	0xFE5
   127                           preinc1	equ	0xFE4
   128                           plusw1	equ	0xFE3
   129                           fsr1h	equ	0xFE2
   130                           fsr1l	equ	0xFE1
   131                           bsr	equ	0xFE0
   132                           indf2	equ	0xFDF
   133                           postinc2	equ	0xFDE
   134                           postdec2	equ	0xFDD
   135                           preinc2	equ	0xFDC
   136                           plusw2	equ	0xFDB
   137                           fsr2h	equ	0xFDA
   138                           fsr2l	equ	0xFD9
   139                           status	equ	0xFD8


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                               Thu Oct 19 08:40:13 2023

                         a_h 0010                           b_h 0012                           a_l 0011  
                         b_l 0013                          WREG 0FE8                          _lcm 0602  
                        loop 0612                         PRODH 0FF4                         PRODL 0FF3  
                compare_high 0638                        finish 066A                       a_times 0021  
                     b_times 0023                       isa$std 0001                      change_b 0658  
                 end_compare 0642                  times_a_or_b 0624                   little_flag 0030  
                   isa$xinst 0000  
